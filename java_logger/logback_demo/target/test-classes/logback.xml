<?xml version="1.0" encoding="UTF-8" ?>
<configuration>

    <!-- 配置集中管理属性。获取：${name} -->

    <!--
        日志输出格式：
            %-5level
            %d{yyyy-MM-dd HH:mm:ss:SSS}     日期
            %c                              全限定类名
            %M                              方法
            %L                              行号
            %thread                         线程名
            %m / %msg                       信息
            %n                              换行
    -->
    <property name="pattern" value="%d [%thread] %-5level %logger{50} - %msg%n"></property>

    <!-- 日志文件路径 -->
    <property name="log_dir" value="D://logs/Demo/java_logger/logback_demo"></property>

    <!-- 控制台 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--
            控制台输出流对象：
                System.out  默认
                System.err
        -->
        <target>System.err</target>
        <!-- 日志消息格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>


    <!-- 日志文件 -->
    <appender name="file" class="ch.qos.logback.core.FileAppender">
        <!-- 日志文件保存路径 -->
        <file>${log_dir}/logback.log</file>
        <!-- 日志消息格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 拦截级别 -->
            <level>info</level>
            <!-- 符合过滤条件的操作 -->
            <onMath>ACCEPT</onMath>
            <!-- 不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- html 格式日志文件 -->
    <appender name="htmlFile" class="ch.qos.logback.core.FileAppender">
        <!-- 日志文件保存路径 -->
        <file>${log_dir}/logback.html</file>
        <!-- html 消息格式配置 -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%d%thread%-5level%logger{50}%msg</pattern>
            </layout>
        </encoder>
    </appender>

    <!-- 日志拆分和归档压缩-->
    <appender name="rollFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件保存路径 -->
        <file>${log_dir}/roll_logback.log</file>
        <!-- 日志消息格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!-- 指定拆分规则 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按照时间和压缩格式声明拆分的文件名 -->
            <fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
            <!-- 按照文件大小拆分 -->
            <maxFileSize>100KB</maxFileSize>
        </rollingPolicy>
    </appender>


    <!-- 异步日志 -->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 指定具体需要异步的appender -->
        <appender-ref ref="file" />
    </appender>

    <!-- root logger配置 -->
    <root level="ALL">
        <appender-ref ref="console" />
        <appender-ref ref="file" />
        <appender-ref ref="htmlFile" />
        <appender-ref ref="rollFile" />
        <appender-ref ref="async" />
    </root>

    <!--
        自定义 logger
             additivity="false"   自定义 logger 对象是否继承 rootLogger
    -->
    <logger name="com.beloved" level="info" additivity="false">
        <appender-ref ref="file" />
    </logger>
</configuration>
